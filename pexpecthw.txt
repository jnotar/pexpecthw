Julia Notar
EEB C234
Mike Alfaro
2/23/15



sudo apt-get install mrbayes python-pexpect

cd bayes_sandbox/
ipython

import pexpect

pexpect.run("date")
pexpect.run("ls -l")
print pexpect.run("ls -l")
results = pexpect.run("ls -l") 
results.splitlines()[2]
Out[16]: '-rw-rw-r-- 1 vagrant vagrant  2705 Feb 12 17:42 primates.nex.mcmc'


prim_run_1 = pexpect.run("mb primates.nex")
#find lines that summarize analysis
for line in prim_run_1.splitlines():
    line = line.lstrip()
    if line.startswith("Analysis") or line.startswith("Likelihood of"):
        print line

Out: Analysis completed in 12 seconds
Analysis used 12.07 seconds of CPU time
Likelihood of best state for "cold" chain of run 1 was -6288.97
Likelihood of best state for "cold" chain of run 2 was -6289.08

#Right now the file primates.nex contians a line that reads "mcmc" This option tells mrbayes to automatically start the markov chain monte carlo (mcmc) analysis. However, there are other analyses we can do with mrbayes once the mcmc has finished. The problem with primates.nex is that the mcmc command will force mrbayes to redo the mcmc analysis every time we execute the file primates.nex To fix this, let's write a script that

#1. edits primates.nex to change the mcmc line to mcmcp
#2. runs mrbayes interactively

newprimates = open("primates2.nex", "w")
oldprimates = open("primates.nex").read()

corrected = oldprimates.replace("mcmc", "mcmcp")

newprimates.write(corrected)
newprimates.close()

child = pexpect.spawn("mb -i primates2.nex") #-i tells mrbayes to run in interactive mode
#send the string "mcmc" to the process. This tells mrbayes to start running. The \r is carriage return
child.sendline(r"mcmc") 
# tells mrbayes to stop the analysis (do not continue)
child.sendline("no") 
child.expect("MrBayes >") # wait for the mrbayes prompt.
print child.before # child.before shows all of the screen output
#now add a line to tell mrbayes to quit ("quit")
child.sendline("quit")

child = pexpect.spawn("mb -i primates2.nex")
child.sendline("execute primates2.nex")
child.sendline("sumt")
child.expect("MrBayes >")
print child.before
child.sendline("sump")
child.sendline("quit")

import glob
allfiles = glob.glob("*") #returns a list of all files in the current directory
s_usr_bin = glob.glob("/usr/bin/s*") #files that start with is in /usr/bin 
images = glob.glob("*.jpg") # list of image files in current directory

#You can combine glob's listing power with pexpect to automate data analysis. For example, to tell mrbayes to analyse all of the nexus files in a folder, you could do something like this.

import glob, pexpect

nexus_files = glob.glob("*.nex")
for nex in nexus_files:
    output = pexpect.run("mb nex")



#HW part 3:

#! /usr/bin/python

from __future__ import division

import glob, pexpect

def function(nexus, numgen = 2000):
    child = pexpect.spawn("mb -i %s" %(nexus)) #initalize interactive mode
    child.sendline("set nowarn = yes") #send command to mr bayes
    child.sendline("mcmcp ngen = %d" %(numgen)) #tell mr bayes to substitute numgen
    child.sendline("mcmc")
    child.sendline("no")
    child.sendline("quit")


def function_2(nexus):
    child = pexpect.spawn("mb -i %s" %(nexus)) #initalize interactive mode
    child.sendline("execute %s" %(nexus)) #run some stuff
    child.sendline("sumt")
    #child.expect("MrBayes >") #not sure if I need this?
    child.sendline("sump")
    child.sendline("quit")

files = glob.glob("*")
t_files = glob.glob("*.t")

print(str("There are " + str(len(files)) + " total files in the current directory and " + str(len(t_files)) + " files that end in '.t'"))

function("primates2.nex")

function_2("primates2.nex")

files2 = glob.glob("*")
t_files2 = glob.glob("*.t")

print(str("There are " + str(len(files2)) + " total files in the current directory and " + str(len(t_files2)) + " files that end in '.t'"))

print("These files end in '.t': " + str(t_files2))

